// Generated by gencpp from file turtlebot3_deliver_service/ServiceStatus.msg
// DO NOT EDIT!


#ifndef TURTLEBOT3_DELIVER_SERVICE_MESSAGE_SERVICESTATUS_H
#define TURTLEBOT3_DELIVER_SERVICE_MESSAGE_SERVICESTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace turtlebot3_deliver_service
{
template <class ContainerAllocator>
struct ServiceStatus_
{
  typedef ServiceStatus_<ContainerAllocator> Type;

  ServiceStatus_()
    : item_num_chosen_by_pad()
    , is_item_available()
    , robot_service_sequence()  {
      item_num_chosen_by_pad.assign(0);

      is_item_available.assign(false);

      robot_service_sequence.assign(0);
  }
  ServiceStatus_(const ContainerAllocator& _alloc)
    : item_num_chosen_by_pad()
    , is_item_available()
    , robot_service_sequence()  {
  (void)_alloc;
      item_num_chosen_by_pad.assign(0);

      is_item_available.assign(false);

      robot_service_sequence.assign(0);
  }



   typedef boost::array<int32_t, 3>  _item_num_chosen_by_pad_type;
  _item_num_chosen_by_pad_type item_num_chosen_by_pad;

   typedef boost::array<uint8_t, 3>  _is_item_available_type;
  _is_item_available_type is_item_available;

   typedef boost::array<int32_t, 3>  _robot_service_sequence_type;
  _robot_service_sequence_type robot_service_sequence;





  typedef boost::shared_ptr< ::turtlebot3_deliver_service::ServiceStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::turtlebot3_deliver_service::ServiceStatus_<ContainerAllocator> const> ConstPtr;

}; // struct ServiceStatus_

typedef ::turtlebot3_deliver_service::ServiceStatus_<std::allocator<void> > ServiceStatus;

typedef boost::shared_ptr< ::turtlebot3_deliver_service::ServiceStatus > ServiceStatusPtr;
typedef boost::shared_ptr< ::turtlebot3_deliver_service::ServiceStatus const> ServiceStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::turtlebot3_deliver_service::ServiceStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::turtlebot3_deliver_service::ServiceStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::turtlebot3_deliver_service::ServiceStatus_<ContainerAllocator1> & lhs, const ::turtlebot3_deliver_service::ServiceStatus_<ContainerAllocator2> & rhs)
{
  return lhs.item_num_chosen_by_pad == rhs.item_num_chosen_by_pad &&
    lhs.is_item_available == rhs.is_item_available &&
    lhs.robot_service_sequence == rhs.robot_service_sequence;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::turtlebot3_deliver_service::ServiceStatus_<ContainerAllocator1> & lhs, const ::turtlebot3_deliver_service::ServiceStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace turtlebot3_deliver_service

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::turtlebot3_deliver_service::ServiceStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turtlebot3_deliver_service::ServiceStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turtlebot3_deliver_service::ServiceStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turtlebot3_deliver_service::ServiceStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlebot3_deliver_service::ServiceStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlebot3_deliver_service::ServiceStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::turtlebot3_deliver_service::ServiceStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "88c792271484968782eee6bf1d95c178";
  }

  static const char* value(const ::turtlebot3_deliver_service::ServiceStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x88c7922714849687ULL;
  static const uint64_t static_value2 = 0x82eee6bf1d95c178ULL;
};

template<class ContainerAllocator>
struct DataType< ::turtlebot3_deliver_service::ServiceStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "turtlebot3_deliver_service/ServiceStatus";
  }

  static const char* value(const ::turtlebot3_deliver_service::ServiceStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::turtlebot3_deliver_service::ServiceStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[3] item_num_chosen_by_pad\n"
"bool[3] is_item_available\n"
"int32[3] robot_service_sequence\n"
;
  }

  static const char* value(const ::turtlebot3_deliver_service::ServiceStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::turtlebot3_deliver_service::ServiceStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.item_num_chosen_by_pad);
      stream.next(m.is_item_available);
      stream.next(m.robot_service_sequence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ServiceStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::turtlebot3_deliver_service::ServiceStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::turtlebot3_deliver_service::ServiceStatus_<ContainerAllocator>& v)
  {
    s << indent << "item_num_chosen_by_pad[]" << std::endl;
    for (size_t i = 0; i < v.item_num_chosen_by_pad.size(); ++i)
    {
      s << indent << "  item_num_chosen_by_pad[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.item_num_chosen_by_pad[i]);
    }
    s << indent << "is_item_available[]" << std::endl;
    for (size_t i = 0; i < v.is_item_available.size(); ++i)
    {
      s << indent << "  is_item_available[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.is_item_available[i]);
    }
    s << indent << "robot_service_sequence[]" << std::endl;
    for (size_t i = 0; i < v.robot_service_sequence.size(); ++i)
    {
      s << indent << "  robot_service_sequence[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.robot_service_sequence[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TURTLEBOT3_DELIVER_SERVICE_MESSAGE_SERVICESTATUS_H
