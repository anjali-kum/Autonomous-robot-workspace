# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from turtlebot3_deliver_service/ServiceStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ServiceStatus(genpy.Message):
  _md5sum = "88c792271484968782eee6bf1d95c178"
  _type = "turtlebot3_deliver_service/ServiceStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32[3] item_num_chosen_by_pad
bool[3] is_item_available
int32[3] robot_service_sequence
"""
  __slots__ = ['item_num_chosen_by_pad','is_item_available','robot_service_sequence']
  _slot_types = ['int32[3]','bool[3]','int32[3]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       item_num_chosen_by_pad,is_item_available,robot_service_sequence

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ServiceStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.item_num_chosen_by_pad is None:
        self.item_num_chosen_by_pad = [0] * 3
      if self.is_item_available is None:
        self.is_item_available = [False] * 3
      if self.robot_service_sequence is None:
        self.robot_service_sequence = [0] * 3
    else:
      self.item_num_chosen_by_pad = [0] * 3
      self.is_item_available = [False] * 3
      self.robot_service_sequence = [0] * 3

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_3i().pack(*self.item_num_chosen_by_pad))
      buff.write(_get_struct_3B().pack(*self.is_item_available))
      buff.write(_get_struct_3i().pack(*self.robot_service_sequence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 12
      self.item_num_chosen_by_pad = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 3
      self.is_item_available = _get_struct_3B().unpack(str[start:end])
      self.is_item_available = list(map(bool, self.is_item_available))
      start = end
      end += 12
      self.robot_service_sequence = _get_struct_3i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.item_num_chosen_by_pad.tostring())
      buff.write(self.is_item_available.tostring())
      buff.write(self.robot_service_sequence.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 12
      self.item_num_chosen_by_pad = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=3)
      start = end
      end += 3
      self.is_item_available = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=3)
      self.is_item_available = list(map(bool, self.is_item_available))
      start = end
      end += 12
      self.robot_service_sequence = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=3)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
